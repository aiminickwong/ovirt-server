#!/bin/bash
#
# ovirt-early Start early ovirt services
#
# chkconfig: 3 01 99
# description: ovirt-early services
#

# Source functions library
. /etc/init.d/functions
. /etc/init.d/ovirt-functions

configure_from_network() {
    DEVICE=$1
    if [ -n "$DEVICE" ]; then
        printf .
        # setup temporary interface to retrieve configuration
        echo "network --device $DEVICE --bootproto dhcp" | nash
        if [ $? -eq 0 ]; then
            printf .
            # from network-scripts/ifup-post
            IPADDR=$(LC_ALL=C ip -o -4 addr ls dev ${DEVICE} | awk '{ print $4 ; exit }')
            eval $(ipcalc --silent --hostname ${IPADDR} ; echo "status=$?")
            if [ "$status" = "0" ]; then
                hostname $HOSTNAME
                # retrieve remote config
                find_srv ovirt tcp
                if [ -n "$SRV_HOST" -a -n "$SRV_PORT" ]; then
                    printf .
                    wget -q -O - "http://$SRV_HOST:$SRV_PORT/ovirt/cfgdb/$(hostname)" \
                        | augtool > /dev/null 2>&1
                    if [ $? -eq 0 ]; then
                        printf "remote config applied."
                        return
                    fi
                fi
            fi
        fi
    fi
    # default oVirt network configuration:
    # bridge each ethernet device in the system
    ETHDEVS=$(cd /sys/class/net && ls -d eth*)
    for eth in $ETHDEVS; do
        BRIDGE=ovirtbr`echo $eth | cut -b4-`
        printf '%s\n' "DEVICE=$eth" ONBOOT=yes "BRIDGE=$BRIDGE" \
            > /etc/sysconfig/network-scripts/ifcfg-$eth
        printf '%s\n' "DEVICE=$BRIDGE" BOOTPROTO=dhcp \
            ONBOOT=yes TYPE=Bridge PEERNTP=yes \
            > /etc/sysconfig/network-scripts/ifcfg-$BRIDGE
    done
    printf "default config applied."
}

start() {
    # find boot interface from cmdline
    # IPAPPEND 2 in pxelinux.cfg appends e.g. BOOTIF=01-00-16-3e-12-34-57
    BOOTIF=
    for i in $(cat /proc/cmdline); do
        case $i in
            BOOTIF=??-??-??-??-??-??-??)
            i=${i/#BOOTIF=??-/}
            BOOTMAC=${i//-/:}
            BOOTIF=$(grep -l $BOOTMAC /sys/class/net/eth*/address|rev|cut -d/ -f2|rev)
            ;;
        esac
    done

    configure_from_network $BOOTIF

    # find all of the partitions on the system

    # get the system pagesize
    PAGESIZE=`getconf PAGESIZE`

    # look first at raw partitions
    BLOCKDEVS=`ls /dev/sd? /dev/hd? 2>/dev/null`

    # now LVM partitions
    LVMDEVS="$DEVICES `lvscan | awk '{print $2}' | tr -d \"'\"`"

    SWAPDEVS="$LVMDEVS"
    for dev in $BLOCKDEVS; do
        SWAPDEVS="$SWAPDEVS `fdisk -l $dev 2>/dev/null | tr '*' ' ' \
                                     | awk '$5 ~ /82/ {print $1}'`"
    done

    # now check if any of these partitions are swap, and activate if so
    for device in $SWAPDEVS; do
        sig=`dd if=$device bs=1 count=10 skip=$(( $PAGESIZE - 10 )) \
            2>/dev/null`
        if [ "$sig" = "SWAPSPACE2" ]; then
            swapon $device
        fi
    done
}

case "$1" in
    start)
        echo -n $"Starting ovirt-early: "

        {
            start
        } >> $OVIRT_LOGFILE 2>&1

        test $? == 0 && success || failure
        echo
        ;;
    *)
        echo "Usage: ovirt-early {start}"
        exit 2
esac
